
pwm_switch_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000005ca  0000065e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  0080010a  0080010a  00000668  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000698  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fb2  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae0  00000000  00000000  00001722  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000885  00000000  00000000  00002202  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00002a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000635  00000000  00000000  00002bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000682  00000000  00000000  00003221  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000038a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ec       	ldi	r30, 0xCA	; 202
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 33       	cpi	r26, 0x38	; 56
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	71 d1       	rcall	.+738    	; 0x3a6 <main>
  c4:	80 c2       	rjmp	.+1280   	; 0x5c6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
	OCR0A = 128;
	OCR0B = 128;
	OCR3A = 128;
	OCR3B = 128;
	OCR2B = 128;
	OCR2A = 128;
  c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
  d8:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <_avr_timer_cntcurr>
  dc:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <_avr_timer_cntcurr+0x1>
  e0:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_avr_timer_cntcurr+0x2>
  e4:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  f8:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 11a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <_avr_timer_cntcurr>
 11e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <_avr_timer_cntcurr+0x1>
 122:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <_avr_timer_cntcurr+0x2>
 126:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <_avr_timer_cntcurr>
 148:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <_avr_timer_cntcurr+0x1>
 14c:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <_avr_timer_cntcurr+0x2>
 150:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <_avr_timer_cntcurr>
 15e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <_avr_timer_cntcurr+0x1>
 162:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <_avr_timer_cntcurr+0x2>
 166:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <TimerFlag>
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 184:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 188:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <_avr_timer_cntcurr>
 18c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <_avr_timer_cntcurr+0x1>
 190:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <_avr_timer_cntcurr+0x2>
 194:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <transmit_data>:
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	47 9a       	sbi	0x08, 7	; 8
 1b4:	46 98       	cbi	0x08, 6	; 8
 1b6:	98 b1       	in	r25, 0x08	; 8
 1b8:	ab 01       	movw	r20, r22
 1ba:	02 2e       	mov	r0, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <transmit_data+0x18>
 1be:	44 0f       	add	r20, r20
 1c0:	55 1f       	adc	r21, r21
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <transmit_data+0x14>
 1c6:	48 23       	and	r20, r24
 1c8:	11 f0       	breq	.+4      	; 0x1ce <transmit_data+0x24>
 1ca:	90 61       	ori	r25, 0x10	; 16
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <transmit_data+0x26>
 1ce:	9f 7e       	andi	r25, 0xEF	; 239
 1d0:	98 b9       	out	0x08, r25	; 8
 1d2:	46 9a       	sbi	0x08, 6	; 8
 1d4:	2f 5f       	subi	r18, 0xFF	; 255
 1d6:	3f 4f       	sbci	r19, 0xFF	; 255
 1d8:	28 30       	cpi	r18, 0x08	; 8
 1da:	31 05       	cpc	r19, r1
 1dc:	51 f7       	brne	.-44     	; 0x1b2 <transmit_data+0x8>
 1de:	45 9a       	sbi	0x08, 5	; 8
 1e0:	47 98       	cbi	0x08, 7	; 8
 1e2:	08 95       	ret

000001e4 <s_Tick>:
 1e4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <s_state>
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	a9 f0       	breq	.+42     	; 0x216 <s_Tick+0x32>
 1ec:	28 f4       	brcc	.+10     	; 0x1f8 <s_Tick+0x14>
 1ee:	88 23       	and	r24, r24
 1f0:	41 f0       	breq	.+16     	; 0x202 <s_Tick+0x1e>
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	51 f0       	breq	.+20     	; 0x20a <s_Tick+0x26>
 1f6:	3f c0       	rjmp	.+126    	; 0x276 <s_Tick+0x92>
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	e9 f0       	breq	.+58     	; 0x236 <s_Tick+0x52>
 1fc:	84 30       	cpi	r24, 0x04	; 4
 1fe:	59 f1       	breq	.+86     	; 0x256 <s_Tick+0x72>
 200:	3a c0       	rjmp	.+116    	; 0x276 <s_Tick+0x92>
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <s_state>
 208:	38 c0       	rjmp	.+112    	; 0x27a <s_Tick+0x96>
 20a:	49 99       	sbic	0x09, 1	; 9
 20c:	36 c0       	rjmp	.+108    	; 0x27a <s_Tick+0x96>
 20e:	84 e0       	ldi	r24, 0x04	; 4
 210:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <s_state>
 214:	32 c0       	rjmp	.+100    	; 0x27a <s_Tick+0x96>
 216:	4a 9b       	sbis	0x09, 2	; 9
 218:	06 c0       	rjmp	.+12     	; 0x226 <s_Tick+0x42>
 21a:	49 9b       	sbis	0x09, 1	; 9
 21c:	04 c0       	rjmp	.+8      	; 0x226 <s_Tick+0x42>
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <s_state>
 224:	31 c0       	rjmp	.+98     	; 0x288 <s_Tick+0xa4>
 226:	4a 99       	sbic	0x09, 2	; 9
 228:	02 c0       	rjmp	.+4      	; 0x22e <s_Tick+0x4a>
 22a:	49 99       	sbic	0x09, 1	; 9
 22c:	2a c0       	rjmp	.+84     	; 0x282 <s_Tick+0x9e>
 22e:	84 e0       	ldi	r24, 0x04	; 4
 230:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <s_state>
 234:	22 c0       	rjmp	.+68     	; 0x27a <s_Tick+0x96>
 236:	4a 9b       	sbis	0x09, 2	; 9
 238:	02 c0       	rjmp	.+4      	; 0x23e <s_Tick+0x5a>
 23a:	49 99       	sbic	0x09, 1	; 9
 23c:	25 c0       	rjmp	.+74     	; 0x288 <s_Tick+0xa4>
 23e:	4a 99       	sbic	0x09, 2	; 9
 240:	06 c0       	rjmp	.+12     	; 0x24e <s_Tick+0x6a>
 242:	49 9b       	sbis	0x09, 1	; 9
 244:	04 c0       	rjmp	.+8      	; 0x24e <s_Tick+0x6a>
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <s_state>
 24c:	1a c0       	rjmp	.+52     	; 0x282 <s_Tick+0x9e>
 24e:	84 e0       	ldi	r24, 0x04	; 4
 250:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <s_state>
 254:	12 c0       	rjmp	.+36     	; 0x27a <s_Tick+0x96>
 256:	49 9b       	sbis	0x09, 1	; 9
 258:	10 c0       	rjmp	.+32     	; 0x27a <s_Tick+0x96>
 25a:	49 9b       	sbis	0x09, 1	; 9
 25c:	08 c0       	rjmp	.+16     	; 0x26e <s_Tick+0x8a>
 25e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <manual>
 262:	81 11       	cpse	r24, r1
 264:	04 c0       	rjmp	.+8      	; 0x26e <s_Tick+0x8a>
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <s_state>
 26c:	06 c0       	rjmp	.+12     	; 0x27a <s_Tick+0x96>
 26e:	83 e0       	ldi	r24, 0x03	; 3
 270:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <s_state>
 274:	09 c0       	rjmp	.+18     	; 0x288 <s_Tick+0xa4>
 276:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <s_state>
 27a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <s_state>
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	08 95       	ret
 282:	8f ef       	ldi	r24, 0xFF	; 255
 284:	92 df       	rcall	.-220    	; 0x1aa <transmit_data>
 286:	f9 cf       	rjmp	.-14     	; 0x27a <s_Tick+0x96>
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	8f df       	rcall	.-226    	; 0x1aa <transmit_data>
 28c:	f6 cf       	rjmp	.-20     	; 0x27a <s_Tick+0x96>

0000028e <ADC_read>:
 28e:	ec e7       	ldi	r30, 0x7C	; 124
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	90 81       	ld	r25, Z
 294:	98 7f       	andi	r25, 0xF8	; 248
 296:	87 70       	andi	r24, 0x07	; 7
 298:	89 2b       	or	r24, r25
 29a:	80 83       	st	Z, r24
 29c:	ea e7       	ldi	r30, 0x7A	; 122
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	80 64       	ori	r24, 0x40	; 64
 2a4:	80 83       	st	Z, r24
 2a6:	80 81       	ld	r24, Z
 2a8:	86 fd       	sbrc	r24, 6
 2aa:	fd cf       	rjmp	.-6      	; 0x2a6 <ADC_read+0x18>
 2ac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 2b0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2b4:	08 95       	ret

000002b6 <j_Tick>:
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	ec 01       	movw	r28, r24
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	e7 df       	rcall	.-50     	; 0x28e <ADC_read>
 2c0:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <x_axis+0x1>
 2c4:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <x_axis>
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	e1 df       	rcall	.-62     	; 0x28e <ADC_read>
 2cc:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <y_axis+0x1>
 2d0:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <y_axis>
 2d4:	22 97       	sbiw	r28, 0x02	; 2
 2d6:	08 f0       	brcs	.+2      	; 0x2da <j_Tick+0x24>
 2d8:	5e c0       	rjmp	.+188    	; 0x396 <j_Tick+0xe0>
 2da:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <x_axis>
 2de:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <x_axis+0x1>
 2e2:	86 3b       	cpi	r24, 0xB6	; 182
 2e4:	23 e0       	ldi	r18, 0x03	; 3
 2e6:	92 07       	cpc	r25, r18
 2e8:	50 f1       	brcs	.+84     	; 0x33e <j_Tick+0x88>
 2ea:	87 b5       	in	r24, 0x27	; 39
 2ec:	88 23       	and	r24, r24
 2ee:	f1 f0       	breq	.+60     	; 0x32c <j_Tick+0x76>
 2f0:	87 b5       	in	r24, 0x27	; 39
 2f2:	82 50       	subi	r24, 0x02	; 2
 2f4:	87 bd       	out	0x27, r24	; 39
 2f6:	88 b5       	in	r24, 0x28	; 40
 2f8:	82 50       	subi	r24, 0x02	; 2
 2fa:	88 bd       	out	0x28, r24	; 40
 2fc:	e8 e9       	ldi	r30, 0x98	; 152
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	91 81       	ldd	r25, Z+1	; 0x01
 304:	02 97       	sbiw	r24, 0x02	; 2
 306:	91 83       	std	Z+1, r25	; 0x01
 308:	80 83       	st	Z, r24
 30a:	ea e9       	ldi	r30, 0x9A	; 154
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	91 81       	ldd	r25, Z+1	; 0x01
 312:	02 97       	sbiw	r24, 0x02	; 2
 314:	91 83       	std	Z+1, r25	; 0x01
 316:	80 83       	st	Z, r24
 318:	e3 eb       	ldi	r30, 0xB3	; 179
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	82 50       	subi	r24, 0x02	; 2
 320:	80 83       	st	Z, r24
 322:	e4 eb       	ldi	r30, 0xB4	; 180
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	82 50       	subi	r24, 0x02	; 2
 32a:	80 83       	st	Z, r24
 32c:	83 ed       	ldi	r24, 0xD3	; 211
 32e:	90 e3       	ldi	r25, 0x30	; 48
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <j_Tick+0x7a>
 334:	00 c0       	rjmp	.+0      	; 0x336 <j_Tick+0x80>
 336:	00 00       	nop
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	31 c0       	rjmp	.+98     	; 0x3a0 <j_Tick+0xea>
 33e:	c3 97       	sbiw	r24, 0x33	; 51
 340:	68 f5       	brcc	.+90     	; 0x39c <j_Tick+0xe6>
 342:	87 b5       	in	r24, 0x27	; 39
 344:	8d 3f       	cpi	r24, 0xFD	; 253
 346:	f0 f4       	brcc	.+60     	; 0x384 <j_Tick+0xce>
 348:	87 b5       	in	r24, 0x27	; 39
 34a:	8e 5f       	subi	r24, 0xFE	; 254
 34c:	87 bd       	out	0x27, r24	; 39
 34e:	88 b5       	in	r24, 0x28	; 40
 350:	8e 5f       	subi	r24, 0xFE	; 254
 352:	88 bd       	out	0x28, r24	; 40
 354:	e8 e9       	ldi	r30, 0x98	; 152
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	91 81       	ldd	r25, Z+1	; 0x01
 35c:	02 96       	adiw	r24, 0x02	; 2
 35e:	91 83       	std	Z+1, r25	; 0x01
 360:	80 83       	st	Z, r24
 362:	ea e9       	ldi	r30, 0x9A	; 154
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	91 81       	ldd	r25, Z+1	; 0x01
 36a:	02 96       	adiw	r24, 0x02	; 2
 36c:	91 83       	std	Z+1, r25	; 0x01
 36e:	80 83       	st	Z, r24
 370:	e3 eb       	ldi	r30, 0xB3	; 179
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	8e 5f       	subi	r24, 0xFE	; 254
 378:	80 83       	st	Z, r24
 37a:	e4 eb       	ldi	r30, 0xB4	; 180
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	8e 5f       	subi	r24, 0xFE	; 254
 382:	80 83       	st	Z, r24
 384:	83 ed       	ldi	r24, 0xD3	; 211
 386:	90 e3       	ldi	r25, 0x30	; 48
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <j_Tick+0xd2>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <j_Tick+0xd8>
 38e:	00 00       	nop
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	05 c0       	rjmp	.+10     	; 0x3a0 <j_Tick+0xea>
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <j_Tick+0xea>
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <main>:

// --------END User defined FSMs-----------------------------------------------

// Implement scheduler code from PES.
int main()
{
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	00 d0       	rcall	.+0      	; 0x3ac <main+0x6>
 3ac:	00 d0       	rcall	.+0      	; 0x3ae <main+0x8>
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <main+0xa>
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF; PORTA = 0x00;
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	81 b9       	out	0x01, r24	; 1
 3b8:	12 b8       	out	0x02, r1	; 2
	//DDRB = 0xFF; PORTB = 0x00;
	DDRC = 0xFF; PORTC = 0x00;
 3ba:	87 b9       	out	0x07, r24	; 7
 3bc:	18 b8       	out	0x08, r1	; 8
	DDRD = 0x00; PORTD = 0xFF;
 3be:	1a b8       	out	0x0a, r1	; 10
 3c0:	8b b9       	out	0x0b, r24	; 11
 3c2:	14 e6       	ldi	r17, 0x64	; 100
 3c4:	00 e0       	ldi	r16, 0x00	; 0
 3c6:	f1 2c       	mov	r15, r1
 3c8:	e1 2c       	mov	r14, r1
 3ca:	51 e0       	ldi	r21, 0x01	; 1
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	20 e0       	ldi	r18, 0x00	; 0
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <main+0x36>
	unsigned long int c;
	while(1){
		c = a%b;
		if(c==0){return b;}
		a = b;
		b = c;
 3d4:	16 2f       	mov	r17, r22
 3d6:	07 2f       	mov	r16, r23
 3d8:	f8 2e       	mov	r15, r24
 3da:	e9 2e       	mov	r14, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 3dc:	65 2f       	mov	r22, r21
 3de:	74 2f       	mov	r23, r20
 3e0:	83 2f       	mov	r24, r19
 3e2:	92 2f       	mov	r25, r18
 3e4:	21 2f       	mov	r18, r17
 3e6:	30 2f       	mov	r19, r16
 3e8:	4f 2d       	mov	r20, r15
 3ea:	5e 2d       	mov	r21, r14
 3ec:	ca d0       	rcall	.+404    	; 0x582 <__udivmodsi4>
 3ee:	51 2f       	mov	r21, r17
 3f0:	40 2f       	mov	r20, r16
 3f2:	3f 2d       	mov	r19, r15
 3f4:	2e 2d       	mov	r18, r14
		if(c==0){return b;}
 3f6:	61 15       	cp	r22, r1
 3f8:	71 05       	cpc	r23, r1
 3fa:	81 05       	cpc	r24, r1
 3fc:	91 05       	cpc	r25, r1
 3fe:	51 f7       	brne	.-44     	; 0x3d4 <main+0x2e>
 400:	0f 2e       	mov	r0, r31
 402:	f4 e6       	ldi	r31, 0x64	; 100
 404:	df 2e       	mov	r13, r31
 406:	f0 2d       	mov	r31, r0
 408:	c1 2c       	mov	r12, r1
 40a:	b1 2c       	mov	r11, r1
 40c:	a1 2c       	mov	r10, r1
 40e:	04 c0       	rjmp	.+8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		a = b;
		b = c;
 410:	d6 2e       	mov	r13, r22
 412:	c7 2e       	mov	r12, r23
 414:	b8 2e       	mov	r11, r24
 416:	a9 2e       	mov	r10, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 418:	61 2f       	mov	r22, r17
 41a:	70 2f       	mov	r23, r16
 41c:	8f 2d       	mov	r24, r15
 41e:	9e 2d       	mov	r25, r14
 420:	2d 2d       	mov	r18, r13
 422:	3c 2d       	mov	r19, r12
 424:	4b 2d       	mov	r20, r11
 426:	5a 2d       	mov	r21, r10
 428:	ac d0       	rcall	.+344    	; 0x582 <__udivmodsi4>
 42a:	1d 2d       	mov	r17, r13
 42c:	0c 2d       	mov	r16, r12
 42e:	fb 2c       	mov	r15, r11
 430:	ea 2c       	mov	r14, r10
		if(c==0){return b;}
 432:	61 15       	cp	r22, r1
 434:	71 05       	cpc	r23, r1
 436:	81 05       	cpc	r24, r1
 438:	91 05       	cpc	r25, r1
 43a:	51 f7       	brne	.-44     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 43c:	0f 2e       	mov	r0, r31
 43e:	f4 e6       	ldi	r31, 0x64	; 100
 440:	ef 2e       	mov	r14, r31
 442:	f0 2d       	mov	r31, r0
 444:	f1 2c       	mov	r15, r1
 446:	00 e0       	ldi	r16, 0x00	; 0
 448:	10 e0       	ldi	r17, 0x00	; 0
 44a:	04 c0       	rjmp	.+8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		a = b;
		b = c;
 44c:	e6 2e       	mov	r14, r22
 44e:	f7 2e       	mov	r15, r23
 450:	08 2f       	mov	r16, r24
 452:	19 2f       	mov	r17, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 454:	6d 2d       	mov	r22, r13
 456:	7c 2d       	mov	r23, r12
 458:	8b 2d       	mov	r24, r11
 45a:	9a 2d       	mov	r25, r10
 45c:	2e 2d       	mov	r18, r14
 45e:	3f 2d       	mov	r19, r15
 460:	40 2f       	mov	r20, r16
 462:	51 2f       	mov	r21, r17
 464:	8e d0       	rcall	.+284    	; 0x582 <__udivmodsi4>
 466:	de 2c       	mov	r13, r14
 468:	cf 2c       	mov	r12, r15
 46a:	b0 2e       	mov	r11, r16
 46c:	a1 2e       	mov	r10, r17
		if(c==0){return b;}
 46e:	61 15       	cp	r22, r1
 470:	71 05       	cpc	r23, r1
 472:	81 05       	cpc	r24, r1
 474:	91 05       	cpc	r25, r1
 476:	51 f7       	brne	.-44     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>

	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;

	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
 478:	64 e6       	ldi	r22, 0x64	; 100
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	2e 2d       	mov	r18, r14
 482:	3f 2d       	mov	r19, r15
 484:	40 2f       	mov	r20, r16
 486:	51 2f       	mov	r21, r17
 488:	7c d0       	rcall	.+248    	; 0x582 <__udivmodsi4>

	//Declare an array of tasks
	static task task1;
	static task task2;
	static task task3;
	task *tasks[] = {&task1, &task2, &task3};
 48a:	86 e0       	ldi	r24, 0x06	; 6
 48c:	e4 e0       	ldi	r30, 0x04	; 4
 48e:	f1 e0       	ldi	r31, 0x01	; 1
 490:	de 01       	movw	r26, r28
 492:	11 96       	adiw	r26, 0x01	; 1
 494:	01 90       	ld	r0, Z+
 496:	0d 92       	st	X+, r0
 498:	8a 95       	dec	r24
 49a:	e1 f7       	brne	.-8      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = -1;//Task initial state.
 49c:	e0 e2       	ldi	r30, 0x20	; 32
 49e:	f1 e0       	ldi	r31, 0x01	; 1
 4a0:	8f ef       	ldi	r24, 0xFF	; 255
 4a2:	80 83       	st	Z, r24
	task1.period = SMTick1_period;//Task Period.
 4a4:	21 83       	std	Z+1, r18	; 0x01
 4a6:	32 83       	std	Z+2, r19	; 0x02
 4a8:	43 83       	std	Z+3, r20	; 0x03
 4aa:	54 83       	std	Z+4, r21	; 0x04
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 4ac:	25 83       	std	Z+5, r18	; 0x05
 4ae:	36 83       	std	Z+6, r19	; 0x06
 4b0:	47 83       	std	Z+7, r20	; 0x07
 4b2:	50 87       	std	Z+8, r21	; 0x08
	task1.TickFct = &d_Tick;//Function pointer for the tick.

	// Task 2
	task2.state = -1;//Task initial state.
 4b4:	a5 e1       	ldi	r26, 0x15	; 21
 4b6:	b1 e0       	ldi	r27, 0x01	; 1
 4b8:	8c 93       	st	X, r24
	task2.period = SMTick2_period;//Task Period.
 4ba:	11 96       	adiw	r26, 0x01	; 1
 4bc:	2d 93       	st	X+, r18
 4be:	3d 93       	st	X+, r19
 4c0:	4d 93       	st	X+, r20
 4c2:	5c 93       	st	X, r21
 4c4:	14 97       	sbiw	r26, 0x04	; 4
	task2.elapsedTime = SMTick2_period;//Task current elapsed time.
 4c6:	15 96       	adiw	r26, 0x05	; 5
 4c8:	2d 93       	st	X+, r18
 4ca:	3d 93       	st	X+, r19
 4cc:	4d 93       	st	X+, r20
 4ce:	5c 93       	st	X, r21
 4d0:	18 97       	sbiw	r26, 0x08	; 8
	task2.TickFct = &s_Tick;//Function pointer for the tick.
 4d2:	82 ef       	ldi	r24, 0xF2	; 242
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	1a 96       	adiw	r26, 0x0a	; 10
 4d8:	9c 93       	st	X, r25
 4da:	8e 93       	st	-X, r24
 4dc:	19 97       	sbiw	r26, 0x09	; 9
	
	// Task 3
	task1.state = -1;//Task initial state.
	task1.period = SMTick3_period;//Task Period.
	task1.elapsedTime = SMTick3_period;//Task current elapsed time.
	task1.TickFct = &j_Tick;//Function pointer for the tick.
 4de:	8b e5       	ldi	r24, 0x5B	; 91
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	92 87       	std	Z+10, r25	; 0x0a
 4e4:	81 87       	std	Z+9, r24	; 0x09
	
	// Set the timer and turn it on
	TimerSet(GCD);
 4e6:	6e 2d       	mov	r22, r14
 4e8:	7f 2d       	mov	r23, r15
 4ea:	80 2f       	mov	r24, r16
 4ec:	91 2f       	mov	r25, r17
	TimerOn();
 4ee:	ec dd       	rcall	.-1064   	; 0xc8 <TimerSet>
 4f0:	fc dd       	rcall	.-1032   	; 0xea <TimerOn>

	PORTC = SetBit(PORTC, 7, 1); //Set SRCLR to high
 4f2:	47 9a       	sbi	0x08, 7	; 8
	PORTC = SetBit(PORTC, 5, 0); //Set RCLK to low
 4f4:	45 98       	cbi	0x08, 5	; 8

	unsigned char a = 0x0A;
	transmit_data(a);
 4f6:	8a e0       	ldi	r24, 0x0A	; 10
 4f8:	58 de       	rcall	.-848    	; 0x1aa <transmit_data>
 4fa:	7e 01       	movw	r14, r28
 4fc:	87 e0       	ldi	r24, 0x07	; 7
 4fe:	e8 0e       	add	r14, r24
 500:	f1 1c       	adc	r15, r1
 502:	de 01       	movw	r26, r28
 504:	11 96       	adiw	r26, 0x01	; 1
 506:	6d 01       	movw	r12, r26
 508:	f6 01       	movw	r30, r12

	unsigned short i = 0;
	while(1) {
		for ( i = 0; i < numTasks; i++ ) {
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 50a:	01 91       	ld	r16, Z+
 50c:	11 91       	ld	r17, Z+
 50e:	6f 01       	movw	r12, r30
 510:	d8 01       	movw	r26, r16
 512:	15 96       	adiw	r26, 0x05	; 5
 514:	4d 91       	ld	r20, X+
 516:	5d 91       	ld	r21, X+
 518:	6d 91       	ld	r22, X+
 51a:	7c 91       	ld	r23, X
 51c:	18 97       	sbiw	r26, 0x08	; 8
 51e:	11 96       	adiw	r26, 0x01	; 1
 520:	8d 91       	ld	r24, X+
 522:	9d 91       	ld	r25, X+
 524:	0d 90       	ld	r0, X+
 526:	bc 91       	ld	r27, X
 528:	a0 2d       	mov	r26, r0
 52a:	48 17       	cp	r20, r24
 52c:	59 07       	cpc	r21, r25
 52e:	6a 07       	cpc	r22, r26
 530:	7b 07       	cpc	r23, r27
 532:	81 f4       	brne	.+32     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 534:	f8 01       	movw	r30, r16
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 536:	80 81       	ld	r24, Z
 538:	01 84       	ldd	r0, Z+9	; 0x09
 53a:	f2 85       	ldd	r31, Z+10	; 0x0a
 53c:	e0 2d       	mov	r30, r0
 53e:	08 2e       	mov	r0, r24
 540:	00 0c       	add	r0, r0
 542:	99 0b       	sbc	r25, r25
 544:	09 95       	icall
 546:	d8 01       	movw	r26, r16
 548:	8c 93       	st	X, r24
 54a:	f8 01       	movw	r30, r16
				tasks[i]->elapsedTime = 0;
 54c:	15 82       	std	Z+5, r1	; 0x05
 54e:	16 82       	std	Z+6, r1	; 0x06
 550:	17 82       	std	Z+7, r1	; 0x07
 552:	10 86       	std	Z+8, r1	; 0x08
 554:	f8 01       	movw	r30, r16
			}
			tasks[i]->elapsedTime += 1;
 556:	85 81       	ldd	r24, Z+5	; 0x05
 558:	96 81       	ldd	r25, Z+6	; 0x06
 55a:	a7 81       	ldd	r26, Z+7	; 0x07
 55c:	b0 85       	ldd	r27, Z+8	; 0x08
 55e:	01 96       	adiw	r24, 0x01	; 1
 560:	a1 1d       	adc	r26, r1
 562:	b1 1d       	adc	r27, r1
 564:	85 83       	std	Z+5, r24	; 0x05
 566:	96 83       	std	Z+6, r25	; 0x06
 568:	a7 83       	std	Z+7, r26	; 0x07
 56a:	b0 87       	std	Z+8, r27	; 0x08
 56c:	45 98       	cbi	0x08, 5	; 8
			PORTC = SetBit(PORTC, 5, 0); //Set RCLK to low
 56e:	ce 14       	cp	r12, r14
	unsigned char a = 0x0A;
	transmit_data(a);

	unsigned short i = 0;
	while(1) {
		for ( i = 0; i < numTasks; i++ ) {
 570:	df 04       	cpc	r13, r15
 572:	51 f6       	brne	.-108    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 574:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <TimerFlag>
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
			PORTC = SetBit(PORTC, 5, 0); //Set RCLK to low
		}
		while(!TimerFlag);
 578:	88 23       	and	r24, r24
 57a:	e1 f3       	breq	.-8      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 57c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <TimerFlag>
		TimerFlag = 0;
 580:	c0 cf       	rjmp	.-128    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>

00000582 <__udivmodsi4>:
	}
 582:	a1 e2       	ldi	r26, 0x21	; 33
 584:	1a 2e       	mov	r1, r26
 586:	aa 1b       	sub	r26, r26
 588:	bb 1b       	sub	r27, r27
 58a:	fd 01       	movw	r30, r26
 58c:	0d c0       	rjmp	.+26     	; 0x5a8 <__udivmodsi4_ep>

0000058e <__udivmodsi4_loop>:
 58e:	aa 1f       	adc	r26, r26
 590:	bb 1f       	adc	r27, r27
 592:	ee 1f       	adc	r30, r30
 594:	ff 1f       	adc	r31, r31
 596:	a2 17       	cp	r26, r18
 598:	b3 07       	cpc	r27, r19
 59a:	e4 07       	cpc	r30, r20
 59c:	f5 07       	cpc	r31, r21
 59e:	20 f0       	brcs	.+8      	; 0x5a8 <__udivmodsi4_ep>
 5a0:	a2 1b       	sub	r26, r18
 5a2:	b3 0b       	sbc	r27, r19
 5a4:	e4 0b       	sbc	r30, r20
 5a6:	f5 0b       	sbc	r31, r21

000005a8 <__udivmodsi4_ep>:
 5a8:	66 1f       	adc	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	88 1f       	adc	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	1a 94       	dec	r1
 5b2:	69 f7       	brne	.-38     	; 0x58e <__udivmodsi4_loop>
 5b4:	60 95       	com	r22
 5b6:	70 95       	com	r23
 5b8:	80 95       	com	r24
 5ba:	90 95       	com	r25
 5bc:	9b 01       	movw	r18, r22
 5be:	ac 01       	movw	r20, r24
 5c0:	bd 01       	movw	r22, r26
 5c2:	cf 01       	movw	r24, r30
 5c4:	08 95       	ret

000005c6 <_exit>:
 5c6:	f8 94       	cli

000005c8 <__stop_program>:
 5c8:	ff cf       	rjmp	.-2      	; 0x5c8 <__stop_program>
