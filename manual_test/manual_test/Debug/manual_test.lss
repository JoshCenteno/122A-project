
manual_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000036e  00000402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800106  00800106  00000408  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c8f  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0e  00000000  00000000  00001177  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f2  00000000  00000000  00001b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00002078  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051a  00000000  00000000  00002170  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000435  00000000  00000000  0000268a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002abf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e6       	ldi	r30, 0x6E	; 110
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 31       	cpi	r26, 0x17	; 23
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ba d0       	rcall	.+372    	; 0x238 <main>
  c4:	52 c1       	rjmp	.+676    	; 0x36a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
		if(c==0){return b;}
		a = b;
		b = c;
	}
	return 0;
}
  c8:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_avr_timer_M>
  cc:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <_avr_timer_M+0x1>
  d0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_avr_timer_M+0x2>
  d4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <_avr_timer_M+0x3>
  d8:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <_avr_timer_cntcurr>
  dc:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <_avr_timer_cntcurr+0x1>
  e0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <_avr_timer_cntcurr+0x2>
  e4:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 10e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 112:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 116:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 11a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 11e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 122:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 126:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <_avr_timer_cntcurr>
 148:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x1>
 14c:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x2>
 150:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 15e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 162:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 166:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <TimerFlag>
 178:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 17c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 180:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 184:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 188:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 18c:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 190:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 194:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <transmit_data>:
//--------End find GCD function ----------------------------------------------

void transmit_data(unsigned char data){
	for(unsigned int i = 0; i < 8; i++){
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	70 e0       	ldi	r23, 0x00	; 0
		PORTC = SetBit(PORTC, 7, 1); //Set SRCLR to high
 1b2:	47 9a       	sbi	0x08, 7	; 8
		PORTC = SetBit(PORTC, 6, 0); //Set SRCLK to low
 1b4:	46 98       	cbi	0x08, 6	; 8
		PORTC = SetBit(PORTC, 4, GetBit(data,i)); //Set SER to send bit
 1b6:	98 b1       	in	r25, 0x08	; 8
 1b8:	ab 01       	movw	r20, r22
 1ba:	02 2e       	mov	r0, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <transmit_data+0x18>
 1be:	44 0f       	add	r20, r20
 1c0:	55 1f       	adc	r21, r21
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <transmit_data+0x14>
 1c6:	48 23       	and	r20, r24
 1c8:	11 f0       	breq	.+4      	; 0x1ce <transmit_data+0x24>
 1ca:	90 61       	ori	r25, 0x10	; 16
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <transmit_data+0x26>
 1ce:	9f 7e       	andi	r25, 0xEF	; 239
 1d0:	98 b9       	out	0x08, r25	; 8
		PORTC = SetBit(PORTC, 6, 1); //Set SRCLK to high
 1d2:	46 9a       	sbi	0x08, 6	; 8
	return 0;
}
//--------End find GCD function ----------------------------------------------

void transmit_data(unsigned char data){
	for(unsigned int i = 0; i < 8; i++){
 1d4:	2f 5f       	subi	r18, 0xFF	; 255
 1d6:	3f 4f       	sbci	r19, 0xFF	; 255
 1d8:	28 30       	cpi	r18, 0x08	; 8
 1da:	31 05       	cpc	r19, r1
 1dc:	51 f7       	brne	.-44     	; 0x1b2 <transmit_data+0x8>
		PORTC = SetBit(PORTC, 7, 1); //Set SRCLR to high
		PORTC = SetBit(PORTC, 6, 0); //Set SRCLK to low
		PORTC = SetBit(PORTC, 4, GetBit(data,i)); //Set SER to send bit
		PORTC = SetBit(PORTC, 6, 1); //Set SRCLK to high
	}
	PORTC = SetBit(PORTC, 5, 1);
 1de:	45 9a       	sbi	0x08, 5	; 8
	PORTC = SetBit(PORTC, 7, 0); //Set SRCLR to low
 1e0:	47 98       	cbi	0x08, 7	; 8
 1e2:	08 95       	ret

000001e4 <d_Tick>:
// 	return state;
// }
enum DisplayState {Start, son, soff} state;
int d_Tick(){
	//Transitions
	switch(state){
 1e4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <state>
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	41 f0       	breq	.+16     	; 0x1fc <d_Tick+0x18>
 1ec:	18 f0       	brcs	.+6      	; 0x1f4 <d_Tick+0x10>
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	59 f0       	breq	.+22     	; 0x208 <d_Tick+0x24>
 1f2:	10 c0       	rjmp	.+32     	; 0x214 <d_Tick+0x30>
		case Start:  // Initial transition
		state = soff;
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
		break;
 1fa:	16 c0       	rjmp	.+44     	; 0x228 <d_Tick+0x44>
		case son:
		if (!s)
 1fc:	48 9b       	sbis	0x09, 0	; 9
 1fe:	0f c0       	rjmp	.+30     	; 0x21e <d_Tick+0x3a>
		{
			state = soff;
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
 206:	10 c0       	rjmp	.+32     	; 0x228 <d_Tick+0x44>
			state = son;
		}
		break;
		
		case soff:
		if (!s)
 208:	48 99       	sbic	0x09, 0	; 9
 20a:	0e c0       	rjmp	.+28     	; 0x228 <d_Tick+0x44>
		{
			state = soff;
		}
		else{
			state = son;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
 212:	05 c0       	rjmp	.+10     	; 0x21e <d_Tick+0x3a>
		break;
		default:
		break;
	}
	//Actions
	switch(state){
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	19 f0       	breq	.+6      	; 0x21e <d_Tick+0x3a>
 218:	82 30       	cpi	r24, 0x02	; 2
 21a:	51 f4       	brne	.+20     	; 0x230 <d_Tick+0x4c>
 21c:	05 c0       	rjmp	.+10     	; 0x228 <d_Tick+0x44>
		case Start:
		break;
		case son:
		tmp = 0xFF;
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		transmit_data(tmp);
 224:	c2 df       	rcall	.-124    	; 0x1aa <transmit_data>
		break;
 226:	04 c0       	rjmp	.+8      	; 0x230 <d_Tick+0x4c>
		
		case  soff:
		tmp = 0x00;
 228:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		transmit_data(tmp);
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	bd df       	rcall	.-134    	; 0x1aa <transmit_data>
		break;		
		default:
		break;
		
	}
	return state;
 230:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <state>
}
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	08 95       	ret

00000238 <main>:
// --------END User defined FSMs-----------------------------------------------

// Implement scheduler code from PES.
int main()
{
	DDRA = 0xFF; PORTA = 0x00;
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	81 b9       	out	0x01, r24	; 1
 23c:	12 b8       	out	0x02, r1	; 2
	DDRB = 0x00; PORTB = 0xFF;
 23e:	14 b8       	out	0x04, r1	; 4
 240:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xFF; PORTC = 0x00;
 242:	87 b9       	out	0x07, r24	; 7
 244:	18 b8       	out	0x08, r1	; 8
 246:	08 ee       	ldi	r16, 0xE8	; 232
 248:	13 e0       	ldi	r17, 0x03	; 3
 24a:	d0 e0       	ldi	r29, 0x00	; 0
 24c:	c0 e0       	ldi	r28, 0x00	; 0
 24e:	51 e0       	ldi	r21, 0x01	; 1
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	04 c0       	rjmp	.+8      	; 0x260 <main+0x28>
	unsigned long int c;
	while(1){
		c = a%b;
		if(c==0){return b;}
		a = b;
		b = c;
 258:	06 2f       	mov	r16, r22
 25a:	17 2f       	mov	r17, r23
 25c:	d8 2f       	mov	r29, r24
 25e:	c9 2f       	mov	r28, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 260:	65 2f       	mov	r22, r21
 262:	74 2f       	mov	r23, r20
 264:	83 2f       	mov	r24, r19
 266:	92 2f       	mov	r25, r18
 268:	20 2f       	mov	r18, r16
 26a:	31 2f       	mov	r19, r17
 26c:	4d 2f       	mov	r20, r29
 26e:	5c 2f       	mov	r21, r28
 270:	5a d0       	rcall	.+180    	; 0x326 <__udivmodsi4>
 272:	50 2f       	mov	r21, r16
 274:	41 2f       	mov	r20, r17
 276:	3d 2f       	mov	r19, r29
 278:	2c 2f       	mov	r18, r28
		if(c==0){return b;}
 27a:	61 15       	cp	r22, r1
 27c:	71 05       	cpc	r23, r1
 27e:	81 05       	cpc	r24, r1
 280:	91 05       	cpc	r25, r1
 282:	51 f7       	brne	.-44     	; 0x258 <main+0x20>

	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;

	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
 284:	68 ee       	ldi	r22, 0xE8	; 232
 286:	73 e0       	ldi	r23, 0x03	; 3
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	20 2f       	mov	r18, r16
 28e:	31 2f       	mov	r19, r17
 290:	4d 2f       	mov	r20, r29
 292:	5c 2f       	mov	r21, r28
 294:	48 d0       	rcall	.+144    	; 0x326 <__udivmodsi4>
	static task task1;
	task *tasks[] = {&task1};
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = -1;//Task initial state.
 296:	e6 e0       	ldi	r30, 0x06	; 6
 298:	f1 e0       	ldi	r31, 0x01	; 1
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	80 83       	st	Z, r24
	task1.period = SMTick1_period;//Task Period.
 29e:	21 83       	std	Z+1, r18	; 0x01
 2a0:	32 83       	std	Z+2, r19	; 0x02
 2a2:	43 83       	std	Z+3, r20	; 0x03
 2a4:	54 83       	std	Z+4, r21	; 0x04
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 2a6:	25 83       	std	Z+5, r18	; 0x05
 2a8:	36 83       	std	Z+6, r19	; 0x06
 2aa:	47 83       	std	Z+7, r20	; 0x07
 2ac:	50 87       	std	Z+8, r21	; 0x08
	task1.TickFct = &d_Tick;//Function pointer for the tick.
 2ae:	82 ef       	ldi	r24, 0xF2	; 242
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	92 87       	std	Z+10, r25	; 0x0a
 2b4:	81 87       	std	Z+9, r24	; 0x09

	// Set the timer and turn it on
	TimerSet(GCD);
 2b6:	60 2f       	mov	r22, r16
 2b8:	71 2f       	mov	r23, r17
 2ba:	8d 2f       	mov	r24, r29
 2bc:	9c 2f       	mov	r25, r28
	TimerOn();
 2be:	04 df       	rcall	.-504    	; 0xc8 <TimerSet>

	PORTC = SetBit(PORTC, 7, 1); //Set SRCLR to high
 2c0:	14 df       	rcall	.-472    	; 0xea <TimerOn>
	PORTC = SetBit(PORTC, 5, 0); //Set RCLK to low
 2c2:	47 9a       	sbi	0x08, 7	; 8

	unsigned char a = 0xAA;
	transmit_data(a);
 2c4:	45 98       	cbi	0x08, 5	; 8
 2c6:	8a ea       	ldi	r24, 0xAA	; 170
 2c8:	70 df       	rcall	.-288    	; 0x1aa <transmit_data>

	unsigned short i;
	while(1) {
		for ( i = 0; i < numTasks; i++ ) {
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 2ca:	c6 e0       	ldi	r28, 0x06	; 6
 2cc:	d1 e0       	ldi	r29, 0x01	; 1
 2ce:	4d 81       	ldd	r20, Y+5	; 0x05
 2d0:	5e 81       	ldd	r21, Y+6	; 0x06
 2d2:	6f 81       	ldd	r22, Y+7	; 0x07
 2d4:	78 85       	ldd	r23, Y+8	; 0x08
 2d6:	89 81       	ldd	r24, Y+1	; 0x01
 2d8:	9a 81       	ldd	r25, Y+2	; 0x02
 2da:	ab 81       	ldd	r26, Y+3	; 0x03
 2dc:	bc 81       	ldd	r27, Y+4	; 0x04
 2de:	48 17       	cp	r20, r24
 2e0:	59 07       	cpc	r21, r25
 2e2:	6a 07       	cpc	r22, r26
 2e4:	7b 07       	cpc	r23, r27
 2e6:	61 f4       	brne	.+24     	; 0x300 <main+0xc8>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 2e8:	88 81       	ld	r24, Y
 2ea:	e9 85       	ldd	r30, Y+9	; 0x09
 2ec:	fa 85       	ldd	r31, Y+10	; 0x0a
 2ee:	08 2e       	mov	r0, r24
 2f0:	00 0c       	add	r0, r0
 2f2:	99 0b       	sbc	r25, r25
 2f4:	09 95       	icall
 2f6:	88 83       	st	Y, r24
				tasks[i]->elapsedTime = 0;
 2f8:	1d 82       	std	Y+5, r1	; 0x05
 2fa:	1e 82       	std	Y+6, r1	; 0x06
 2fc:	1f 82       	std	Y+7, r1	; 0x07
 2fe:	18 86       	std	Y+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 300:	8d 81       	ldd	r24, Y+5	; 0x05
 302:	9e 81       	ldd	r25, Y+6	; 0x06
 304:	af 81       	ldd	r26, Y+7	; 0x07
 306:	b8 85       	ldd	r27, Y+8	; 0x08
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	a1 1d       	adc	r26, r1
 30c:	b1 1d       	adc	r27, r1
 30e:	8d 83       	std	Y+5, r24	; 0x05
 310:	9e 83       	std	Y+6, r25	; 0x06
 312:	af 83       	std	Y+7, r26	; 0x07
 314:	b8 87       	std	Y+8, r27	; 0x08
			PORTC = SetBit(PORTC, 5, 0); //Set RCLK to low
 316:	45 98       	cbi	0x08, 5	; 8
		}
		while(!TimerFlag);
 318:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <TimerFlag>
 31c:	88 23       	and	r24, r24
 31e:	e1 f3       	breq	.-8      	; 0x318 <main+0xe0>
		TimerFlag = 0;
 320:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <TimerFlag>
	}
 324:	d4 cf       	rjmp	.-88     	; 0x2ce <main+0x96>

00000326 <__udivmodsi4>:
 326:	a1 e2       	ldi	r26, 0x21	; 33
 328:	1a 2e       	mov	r1, r26
 32a:	aa 1b       	sub	r26, r26
 32c:	bb 1b       	sub	r27, r27
 32e:	fd 01       	movw	r30, r26
 330:	0d c0       	rjmp	.+26     	; 0x34c <__udivmodsi4_ep>

00000332 <__udivmodsi4_loop>:
 332:	aa 1f       	adc	r26, r26
 334:	bb 1f       	adc	r27, r27
 336:	ee 1f       	adc	r30, r30
 338:	ff 1f       	adc	r31, r31
 33a:	a2 17       	cp	r26, r18
 33c:	b3 07       	cpc	r27, r19
 33e:	e4 07       	cpc	r30, r20
 340:	f5 07       	cpc	r31, r21
 342:	20 f0       	brcs	.+8      	; 0x34c <__udivmodsi4_ep>
 344:	a2 1b       	sub	r26, r18
 346:	b3 0b       	sbc	r27, r19
 348:	e4 0b       	sbc	r30, r20
 34a:	f5 0b       	sbc	r31, r21

0000034c <__udivmodsi4_ep>:
 34c:	66 1f       	adc	r22, r22
 34e:	77 1f       	adc	r23, r23
 350:	88 1f       	adc	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	1a 94       	dec	r1
 356:	69 f7       	brne	.-38     	; 0x332 <__udivmodsi4_loop>
 358:	60 95       	com	r22
 35a:	70 95       	com	r23
 35c:	80 95       	com	r24
 35e:	90 95       	com	r25
 360:	9b 01       	movw	r18, r22
 362:	ac 01       	movw	r20, r24
 364:	bd 01       	movw	r22, r26
 366:	cf 01       	movw	r24, r30
 368:	08 95       	ret

0000036a <_exit>:
 36a:	f8 94       	cli

0000036c <__stop_program>:
 36c:	ff cf       	rjmp	.-2      	; 0x36c <__stop_program>
