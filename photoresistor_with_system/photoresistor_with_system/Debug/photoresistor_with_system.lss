
photoresistor_with_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000007de  00000872  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  0080010a  0080010a  0000087c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f64  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac3  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000098e  00000000  00000000  000023ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00002d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068a  00000000  00000000  00002ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000681  00000000  00000000  0000352a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003bab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
   6:	00 00       	nop
   8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
   a:	00 00       	nop
   c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
   e:	00 00       	nop
  10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
  12:	00 00       	nop
  14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
  16:	00 00       	nop
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
  22:	00 00       	nop
  24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>
  26:	00 00       	nop
  28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5c c0       	rjmp	.+184    	; 0xe6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5a c0       	rjmp	.+180    	; 0xe6 <__bad_interrupt>
  32:	00 00       	nop
  34:	db c1       	rjmp	.+950    	; 0x3ec <__vector_13>
  36:	00 00       	nop
  38:	56 c0       	rjmp	.+172    	; 0xe6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	54 c0       	rjmp	.+168    	; 0xe6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	52 c0       	rjmp	.+164    	; 0xe6 <__bad_interrupt>
  42:	00 00       	nop
  44:	50 c0       	rjmp	.+160    	; 0xe6 <__bad_interrupt>
  46:	00 00       	nop
  48:	4e c0       	rjmp	.+156    	; 0xe6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4c c0       	rjmp	.+152    	; 0xe6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4a c0       	rjmp	.+148    	; 0xe6 <__bad_interrupt>
  52:	00 00       	nop
  54:	48 c0       	rjmp	.+144    	; 0xe6 <__bad_interrupt>
  56:	00 00       	nop
  58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
  62:	00 00       	nop
  64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
  66:	00 00       	nop
  68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
  72:	00 00       	nop
  74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
  76:	00 00       	nop
  78:	36 c0       	rjmp	.+108    	; 0xe6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
  82:	00 00       	nop
  84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
  86:	00 00       	nop
  88:	2e c0       	rjmp	.+92     	; 0xe6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	80 00       	.word	0x0080	; ????
  8e:	84 00       	.word	0x0084	; ????
  90:	9e 00       	.word	0x009e	; ????
  92:	b1 00       	.word	0x00b1	; ????
  94:	dd 00       	.word	0x00dd	; ????
  96:	f2 00       	.word	0x00f2	; ????
  98:	d5 00       	.word	0x00d5	; ????
  9a:	d9 00       	.word	0x00d9	; ????
  9c:	2e 01       	movw	r4, r28
  9e:	32 01       	movw	r6, r4
  a0:	40 01       	movw	r8, r0
  a2:	58 01       	movw	r10, r16
  a4:	79 01       	movw	r14, r18
  a6:	91 01       	movw	r18, r2
  a8:	95 01       	movw	r18, r10
  aa:	99 01       	movw	r18, r18

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e4       	ldi	r29, 0x40	; 64
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ee ed       	ldi	r30, 0xDE	; 222
  c0:	f7 e0       	ldi	r31, 0x07	; 7
  c2:	00 e0       	ldi	r16, 0x00	; 0
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
  c8:	07 90       	elpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	aa 30       	cpi	r26, 0x0A	; 10
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	aa e0       	ldi	r26, 0x0A	; 10
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	aa 33       	cpi	r26, 0x3A	; 58
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	4f d2       	rcall	.+1182   	; 0x582 <main>
  e4:	7a c3       	rjmp	.+1780   	; 0x7da <_exit>

000000e6 <__bad_interrupt>:
  e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <d_Tick>:
void ADC_Wait()
{
	uint8_t i;
	for(i=0;i<20;i++)
	_delay_loop_2(0);
}
  e8:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <d_state>
  ec:	8e 2f       	mov	r24, r30
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	88 30       	cpi	r24, 0x08	; 8
  f2:	91 05       	cpc	r25, r1
  f4:	08 f0       	brcs	.+2      	; 0xf8 <d_Tick+0x10>
  f6:	83 c0       	rjmp	.+262    	; 0x1fe <d_Tick+0x116>
  f8:	fc 01       	movw	r30, r24
  fa:	ea 5b       	subi	r30, 0xBA	; 186
  fc:	ff 4f       	sbci	r31, 0xFF	; 255
  fe:	64 c3       	rjmp	.+1736   	; 0x7c8 <__tablejump2__>
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <d_state>
 106:	81 c0       	rjmp	.+258    	; 0x20a <d_Tick+0x122>
 108:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <photoresistor>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	09 f4       	brne	.+2      	; 0x112 <d_Tick+0x2a>
 110:	7c c0       	rjmp	.+248    	; 0x20a <d_Tick+0x122>
 112:	30 99       	sbic	0x06, 0	; 6
 114:	0d c0       	rjmp	.+26     	; 0x130 <d_Tick+0x48>
 116:	86 e0       	ldi	r24, 0x06	; 6
 118:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <d_state>
 11c:	80 e8       	ldi	r24, 0x80	; 128
 11e:	87 bd       	out	0x27, r24	; 39
 120:	88 bd       	out	0x28, r24	; 40
 122:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 126:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	8b b9       	out	0x0b, r24	; 11
 12e:	69 c0       	rjmp	.+210    	; 0x202 <d_Tick+0x11a>
 130:	31 99       	sbic	0x06, 1	; 6
 132:	6b c0       	rjmp	.+214    	; 0x20a <d_Tick+0x122>
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <d_state>
 13a:	7d c0       	rjmp	.+250    	; 0x236 <d_Tick+0x14e>
 13c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <photoresistor>
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	19 f4       	brne	.+6      	; 0x14a <d_Tick+0x62>
 144:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <d_state>
 148:	60 c0       	rjmp	.+192    	; 0x20a <d_Tick+0x122>
 14a:	30 9b       	sbis	0x06, 0	; 6
 14c:	6b c0       	rjmp	.+214    	; 0x224 <d_Tick+0x13c>
 14e:	31 99       	sbic	0x06, 1	; 6
 150:	04 c0       	rjmp	.+8      	; 0x15a <d_Tick+0x72>
 152:	84 e0       	ldi	r24, 0x04	; 4
 154:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <d_state>
 158:	6e c0       	rjmp	.+220    	; 0x236 <d_Tick+0x14e>
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <d_state>
 160:	64 c0       	rjmp	.+200    	; 0x22a <d_Tick+0x142>
 162:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <photoresistor>
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	19 f4       	brne	.+6      	; 0x170 <d_Tick+0x88>
 16a:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <d_state>
 16e:	4d c0       	rjmp	.+154    	; 0x20a <d_Tick+0x122>
 170:	30 99       	sbic	0x06, 0	; 6
 172:	04 c0       	rjmp	.+8      	; 0x17c <d_Tick+0x94>
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <d_state>
 17a:	54 c0       	rjmp	.+168    	; 0x224 <d_Tick+0x13c>
 17c:	31 99       	sbic	0x06, 1	; 6
 17e:	04 c0       	rjmp	.+8      	; 0x188 <d_Tick+0xa0>
 180:	84 e0       	ldi	r24, 0x04	; 4
 182:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <d_state>
 186:	57 c0       	rjmp	.+174    	; 0x236 <d_Tick+0x14e>
 188:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <cnt>
 18c:	84 31       	cpi	r24, 0x14	; 20
 18e:	08 f4       	brcc	.+2      	; 0x192 <d_Tick+0xaa>
 190:	4c c0       	rjmp	.+152    	; 0x22a <d_Tick+0x142>
 192:	87 e0       	ldi	r24, 0x07	; 7
 194:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <d_state>
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	87 bd       	out	0x27, r24	; 39
 19c:	88 bd       	out	0x28, r24	; 40
 19e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 1a2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 1a6:	1b b8       	out	0x0b, r1	; 11
 1a8:	2c c0       	rjmp	.+88     	; 0x202 <d_Tick+0x11a>
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <d_state>
 1b0:	39 c0       	rjmp	.+114    	; 0x224 <d_Tick+0x13c>
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <d_state>
 1b8:	28 c0       	rjmp	.+80     	; 0x20a <d_Tick+0x122>
 1ba:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <photoresistor>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	19 f4       	brne	.+6      	; 0x1c8 <d_Tick+0xe0>
 1c2:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <d_state>
 1c6:	21 c0       	rjmp	.+66     	; 0x20a <d_Tick+0x122>
 1c8:	31 9b       	sbis	0x06, 1	; 6
 1ca:	35 c0       	rjmp	.+106    	; 0x236 <d_Tick+0x14e>
 1cc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <manual>
 1d0:	81 11       	cpse	r24, r1
 1d2:	04 c0       	rjmp	.+8      	; 0x1dc <d_Tick+0xf4>
 1d4:	85 e0       	ldi	r24, 0x05	; 5
 1d6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <d_state>
 1da:	30 c0       	rjmp	.+96     	; 0x23c <d_Tick+0x154>
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <d_state>
 1e2:	13 c0       	rjmp	.+38     	; 0x20a <d_Tick+0x122>
 1e4:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <photoresistor>
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	19 f4       	brne	.+6      	; 0x1f2 <d_Tick+0x10a>
 1ec:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <d_state>
 1f0:	0c c0       	rjmp	.+24     	; 0x20a <d_Tick+0x122>
 1f2:	31 99       	sbic	0x06, 1	; 6
 1f4:	23 c0       	rjmp	.+70     	; 0x23c <d_Tick+0x154>
 1f6:	84 e0       	ldi	r24, 0x04	; 4
 1f8:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <d_state>
 1fc:	1c c0       	rjmp	.+56     	; 0x236 <d_Tick+0x14e>
 1fe:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <d_state>
 202:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <d_state>
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	08 95       	ret
 20a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <manual>
 20e:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <cnt>
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	87 bd       	out	0x27, r24	; 39
 216:	88 bd       	out	0x28, r24	; 40
 218:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 21c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 220:	1b b8       	out	0x0b, r1	; 11
 222:	ef cf       	rjmp	.-34     	; 0x202 <d_Tick+0x11a>
 224:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <cnt>
 228:	ec cf       	rjmp	.-40     	; 0x202 <d_Tick+0x11a>
 22a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <cnt>
 22e:	8f 5f       	subi	r24, 0xFF	; 255
 230:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <cnt>
 234:	e6 cf       	rjmp	.-52     	; 0x202 <d_Tick+0x11a>
 236:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <cnt>
 23a:	e3 cf       	rjmp	.-58     	; 0x202 <d_Tick+0x11a>
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <manual>
 242:	df cf       	rjmp	.-66     	; 0x202 <d_Tick+0x11a>

00000244 <s_Tick>:
 244:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <s_state>
 248:	8e 2f       	mov	r24, r30
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	88 30       	cpi	r24, 0x08	; 8
 24e:	91 05       	cpc	r25, r1
 250:	08 f0       	brcs	.+2      	; 0x254 <s_Tick+0x10>
 252:	7f c0       	rjmp	.+254    	; 0x352 <s_Tick+0x10e>
 254:	fc 01       	movw	r30, r24
 256:	e2 5b       	subi	r30, 0xB2	; 178
 258:	ff 4f       	sbci	r31, 0xFF	; 255
 25a:	b6 c2       	rjmp	.+1388   	; 0x7c8 <__tablejump2__>
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <s_state>
 262:	79 c0       	rjmp	.+242    	; 0x356 <s_Tick+0x112>
 264:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <photoresistor>
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	21 f4       	brne	.+8      	; 0x274 <s_Tick+0x30>
 26c:	87 e0       	ldi	r24, 0x07	; 7
 26e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <s_state>
 272:	71 c0       	rjmp	.+226    	; 0x356 <s_Tick+0x112>
 274:	31 99       	sbic	0x06, 1	; 6
 276:	6f c0       	rjmp	.+222    	; 0x356 <s_Tick+0x112>
 278:	84 e0       	ldi	r24, 0x04	; 4
 27a:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <s_state>
 27e:	6b c0       	rjmp	.+214    	; 0x356 <s_Tick+0x112>
 280:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <photoresistor>
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	21 f4       	brne	.+8      	; 0x290 <s_Tick+0x4c>
 288:	87 e0       	ldi	r24, 0x07	; 7
 28a:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <s_state>
 28e:	63 c0       	rjmp	.+198    	; 0x356 <s_Tick+0x112>
 290:	32 9b       	sbis	0x06, 2	; 6
 292:	06 c0       	rjmp	.+12     	; 0x2a0 <s_Tick+0x5c>
 294:	31 9b       	sbis	0x06, 1	; 6
 296:	04 c0       	rjmp	.+8      	; 0x2a0 <s_Tick+0x5c>
 298:	86 e0       	ldi	r24, 0x06	; 6
 29a:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <s_state>
 29e:	68 c0       	rjmp	.+208    	; 0x370 <s_Tick+0x12c>
 2a0:	32 99       	sbic	0x06, 2	; 6
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <s_Tick+0x64>
 2a4:	31 99       	sbic	0x06, 1	; 6
 2a6:	57 c0       	rjmp	.+174    	; 0x356 <s_Tick+0x112>
 2a8:	84 e0       	ldi	r24, 0x04	; 4
 2aa:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <s_state>
 2ae:	53 c0       	rjmp	.+166    	; 0x356 <s_Tick+0x112>
 2b0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <photoresistor>
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	21 f4       	brne	.+8      	; 0x2c0 <s_Tick+0x7c>
 2b8:	87 e0       	ldi	r24, 0x07	; 7
 2ba:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <s_state>
 2be:	4b c0       	rjmp	.+150    	; 0x356 <s_Tick+0x112>
 2c0:	32 9b       	sbis	0x06, 2	; 6
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <s_Tick+0x84>
 2c4:	31 99       	sbic	0x06, 1	; 6
 2c6:	4b c0       	rjmp	.+150    	; 0x35e <s_Tick+0x11a>
 2c8:	32 99       	sbic	0x06, 2	; 6
 2ca:	0f c0       	rjmp	.+30     	; 0x2ea <s_Tick+0xa6>
 2cc:	31 9b       	sbis	0x06, 1	; 6
 2ce:	0d c0       	rjmp	.+26     	; 0x2ea <s_Tick+0xa6>
 2d0:	85 e0       	ldi	r24, 0x05	; 5
 2d2:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <s_state>
 2d6:	80 e8       	ldi	r24, 0x80	; 128
 2d8:	87 bd       	out	0x27, r24	; 39
 2da:	88 bd       	out	0x28, r24	; 40
 2dc:	9f ef       	ldi	r25, 0xFF	; 255
 2de:	9b b9       	out	0x0b, r25	; 11
 2e0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 2e4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 2e8:	36 c0       	rjmp	.+108    	; 0x356 <s_Tick+0x112>
 2ea:	84 e0       	ldi	r24, 0x04	; 4
 2ec:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <s_state>
 2f0:	32 c0       	rjmp	.+100    	; 0x356 <s_Tick+0x112>
 2f2:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <photoresistor>
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	21 f4       	brne	.+8      	; 0x302 <s_Tick+0xbe>
 2fa:	87 e0       	ldi	r24, 0x07	; 7
 2fc:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <s_state>
 300:	2a c0       	rjmp	.+84     	; 0x356 <s_Tick+0x112>
 302:	31 9b       	sbis	0x06, 1	; 6
 304:	28 c0       	rjmp	.+80     	; 0x356 <s_Tick+0x112>
 306:	31 9b       	sbis	0x06, 1	; 6
 308:	08 c0       	rjmp	.+16     	; 0x31a <s_Tick+0xd6>
 30a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <manual>
 30e:	81 11       	cpse	r24, r1
 310:	04 c0       	rjmp	.+8      	; 0x31a <s_Tick+0xd6>
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <s_state>
 318:	1e c0       	rjmp	.+60     	; 0x356 <s_Tick+0x112>
 31a:	86 e0       	ldi	r24, 0x06	; 6
 31c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <s_state>
 320:	27 c0       	rjmp	.+78     	; 0x370 <s_Tick+0x12c>
 322:	82 e0       	ldi	r24, 0x02	; 2
 324:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <s_state>
 328:	16 c0       	rjmp	.+44     	; 0x356 <s_Tick+0x112>
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <s_state>
 330:	16 c0       	rjmp	.+44     	; 0x35e <s_Tick+0x11a>
 332:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <photoresistor>
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	71 f0       	breq	.+28     	; 0x356 <s_Tick+0x112>
 33a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <manual>
 33e:	81 11       	cpse	r24, r1
 340:	04 c0       	rjmp	.+8      	; 0x34a <s_Tick+0x106>
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <s_state>
 348:	06 c0       	rjmp	.+12     	; 0x356 <s_Tick+0x112>
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <s_state>
 350:	02 c0       	rjmp	.+4      	; 0x356 <s_Tick+0x112>
 352:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <s_state>
 356:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <s_state>
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	08 95       	ret
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	87 bd       	out	0x27, r24	; 39
 362:	88 bd       	out	0x28, r24	; 40
 364:	1b b8       	out	0x0b, r1	; 11
 366:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 36a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 36e:	f3 cf       	rjmp	.-26     	; 0x356 <s_Tick+0x112>
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	87 bd       	out	0x27, r24	; 39
 374:	88 bd       	out	0x28, r24	; 40
 376:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 37a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 37e:	1b b8       	out	0x0b, r1	; 11
 380:	ea cf       	rjmp	.-44     	; 0x356 <s_Tick+0x112>

00000382 <TimerSet>:
 382:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 386:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 38a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 38e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 392:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <_avr_timer_cntcurr>
 396:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <_avr_timer_cntcurr+0x1>
 39a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <_avr_timer_cntcurr+0x2>
 39e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <_avr_timer_cntcurr+0x3>
 3a2:	08 95       	ret

000003a4 <TimerOn>:
 3a4:	8b e0       	ldi	r24, 0x0B	; 11
 3a6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3aa:	8d e7       	ldi	r24, 0x7D	; 125
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 3bc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3c0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3cc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 3d0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 3d4:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_avr_timer_cntcurr>
 3d8:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <_avr_timer_cntcurr+0x1>
 3dc:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <_avr_timer_cntcurr+0x2>
 3e0:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <_avr_timer_cntcurr+0x3>
 3e4:	8f b7       	in	r24, 0x3f	; 63
 3e6:	80 68       	ori	r24, 0x80	; 128
 3e8:	8f bf       	out	0x3f, r24	; 63
 3ea:	08 95       	ret

000003ec <__vector_13>:
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	8f 93       	push	r24
 3f8:	9f 93       	push	r25
 3fa:	af 93       	push	r26
 3fc:	bf 93       	push	r27
 3fe:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <_avr_timer_cntcurr>
 402:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <_avr_timer_cntcurr+0x1>
 406:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <_avr_timer_cntcurr+0x2>
 40a:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <_avr_timer_cntcurr+0x3>
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	a1 09       	sbc	r26, r1
 412:	b1 09       	sbc	r27, r1
 414:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_avr_timer_cntcurr>
 418:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <_avr_timer_cntcurr+0x1>
 41c:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <_avr_timer_cntcurr+0x2>
 420:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <_avr_timer_cntcurr+0x3>
 424:	89 2b       	or	r24, r25
 426:	8a 2b       	or	r24, r26
 428:	8b 2b       	or	r24, r27
 42a:	99 f4       	brne	.+38     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <TimerFlag>
 432:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 436:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 43a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 43e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 442:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_avr_timer_cntcurr>
 446:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <_avr_timer_cntcurr+0x1>
 44a:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <_avr_timer_cntcurr+0x2>
 44e:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <_avr_timer_cntcurr+0x3>
 452:	bf 91       	pop	r27
 454:	af 91       	pop	r26
 456:	9f 91       	pop	r25
 458:	8f 91       	pop	r24
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <pwm_init>:
 464:	93 ef       	ldi	r25, 0xF3	; 243
 466:	94 bd       	out	0x24, r25	; 36
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	85 bd       	out	0x25, r24	; 37
 46c:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 470:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 474:	8f ef       	ldi	r24, 0xFF	; 255
 476:	87 bd       	out	0x27, r24	; 39
 478:	88 bd       	out	0x28, r24	; 40
 47a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 47e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 482:	08 95       	ret

00000484 <ADC_init>:
 484:	80 e4       	ldi	r24, 0x40	; 64
 486:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 48a:	87 e8       	ldi	r24, 0x87	; 135
 48c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 490:	08 95       	ret

00000492 <ADC_read>:
 492:	ec e7       	ldi	r30, 0x7C	; 124
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	90 81       	ld	r25, Z
 498:	98 7f       	andi	r25, 0xF8	; 248
 49a:	87 70       	andi	r24, 0x07	; 7
 49c:	89 2b       	or	r24, r25
 49e:	80 83       	st	Z, r24
 4a0:	ea e7       	ldi	r30, 0x7A	; 122
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	80 81       	ld	r24, Z
 4a6:	80 64       	ori	r24, 0x40	; 64
 4a8:	80 83       	st	Z, r24
 4aa:	80 81       	ld	r24, Z
 4ac:	86 fd       	sbrc	r24, 6
 4ae:	fd cf       	rjmp	.-6      	; 0x4aa <ADC_read+0x18>
 4b0:	ea e7       	ldi	r30, 0x7A	; 122
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	80 61       	ori	r24, 0x10	; 16
 4b8:	80 83       	st	Z, r24
 4ba:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 4be:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 4c2:	08 95       	ret

000004c4 <j_Tick>:
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	ec 01       	movw	r28, r24
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	e2 df       	rcall	.-60     	; 0x492 <ADC_read>
 4ce:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <x_axis+0x1>
 4d2:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <x_axis>
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	dc df       	rcall	.-72     	; 0x492 <ADC_read>
 4da:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <y_axis+0x1>
 4de:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <y_axis>
 4e2:	22 97       	sbiw	r28, 0x02	; 2
 4e4:	08 f0       	brcs	.+2      	; 0x4e8 <j_Tick+0x24>
 4e6:	45 c0       	rjmp	.+138    	; 0x572 <j_Tick+0xae>
 4e8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <x_axis>
 4ec:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <x_axis+0x1>
 4f0:	86 3b       	cpi	r24, 0xB6	; 182
 4f2:	23 e0       	ldi	r18, 0x03	; 3
 4f4:	92 07       	cpc	r25, r18
 4f6:	f8 f0       	brcs	.+62     	; 0x536 <j_Tick+0x72>
 4f8:	87 b5       	in	r24, 0x27	; 39
 4fa:	8f 3f       	cpi	r24, 0xFF	; 255
 4fc:	99 f0       	breq	.+38     	; 0x524 <j_Tick+0x60>
 4fe:	87 b5       	in	r24, 0x27	; 39
 500:	88 23       	and	r24, r24
 502:	81 f0       	breq	.+32     	; 0x524 <j_Tick+0x60>
 504:	87 b5       	in	r24, 0x27	; 39
 506:	82 50       	subi	r24, 0x02	; 2
 508:	87 bd       	out	0x27, r24	; 39
 50a:	88 b5       	in	r24, 0x28	; 40
 50c:	82 50       	subi	r24, 0x02	; 2
 50e:	88 bd       	out	0x28, r24	; 40
 510:	e3 eb       	ldi	r30, 0xB3	; 179
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	82 50       	subi	r24, 0x02	; 2
 518:	80 83       	st	Z, r24
 51a:	e4 eb       	ldi	r30, 0xB4	; 180
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	82 50       	subi	r24, 0x02	; 2
 522:	80 83       	st	Z, r24
 524:	83 ed       	ldi	r24, 0xD3	; 211
 526:	90 e3       	ldi	r25, 0x30	; 48
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <j_Tick+0x64>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <j_Tick+0x6a>
 52e:	00 00       	nop
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	23 c0       	rjmp	.+70     	; 0x57c <j_Tick+0xb8>
 536:	c3 97       	sbiw	r24, 0x33	; 51
 538:	f8 f4       	brcc	.+62     	; 0x578 <j_Tick+0xb4>
 53a:	87 b5       	in	r24, 0x27	; 39
 53c:	8d 3f       	cpi	r24, 0xFD	; 253
 53e:	80 f4       	brcc	.+32     	; 0x560 <j_Tick+0x9c>
 540:	87 b5       	in	r24, 0x27	; 39
 542:	8e 5f       	subi	r24, 0xFE	; 254
 544:	87 bd       	out	0x27, r24	; 39
 546:	88 b5       	in	r24, 0x28	; 40
 548:	8e 5f       	subi	r24, 0xFE	; 254
 54a:	88 bd       	out	0x28, r24	; 40
 54c:	e3 eb       	ldi	r30, 0xB3	; 179
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	8e 5f       	subi	r24, 0xFE	; 254
 554:	80 83       	st	Z, r24
 556:	e4 eb       	ldi	r30, 0xB4	; 180
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	8e 5f       	subi	r24, 0xFE	; 254
 55e:	80 83       	st	Z, r24
 560:	83 ed       	ldi	r24, 0xD3	; 211
 562:	90 e3       	ldi	r25, 0x30	; 48
 564:	01 97       	sbiw	r24, 0x01	; 1
 566:	f1 f7       	brne	.-4      	; 0x564 <j_Tick+0xa0>
 568:	00 c0       	rjmp	.+0      	; 0x56a <j_Tick+0xa6>
 56a:	00 00       	nop
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	05 c0       	rjmp	.+10     	; 0x57c <j_Tick+0xb8>
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	02 c0       	rjmp	.+4      	; 0x57c <j_Tick+0xb8>
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	08 95       	ret

00000582 <main>:
}

// --------END User defined FSMs-----------------------------------------------

// Implement scheduler code from PES.
int main(){
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	00 d0       	rcall	.+0      	; 0x588 <main+0x6>
 588:	00 d0       	rcall	.+0      	; 0x58a <main+0x8>
 58a:	00 d0       	rcall	.+0      	; 0x58c <main+0xa>
 58c:	cd b7       	in	r28, 0x3d	; 61
 58e:	de b7       	in	r29, 0x3e	; 62
	// 	DDRA = 0x00;// PORTA = 0x00;
	// 	DDRB = 0xFF; //PORTB = 0x00;
	// 	DDRC = 0xFF; //PORTC = 0xFF;
	// 	DDRD = 0x00; PORTD = 0xFF;
	//
	DDRA = 0x00;// PORTA = 0x00;
 590:	11 b8       	out	0x01, r1	; 1
	DDRB = 0xFF; //PORTB = 0x00;
 592:	8f ef       	ldi	r24, 0xFF	; 255
 594:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x00; PORTC = 0xFF;
 596:	17 b8       	out	0x07, r1	; 7
 598:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF;// PORTD = 0xFF;
 59a:	8a b9       	out	0x0a, r24	; 10
 59c:	12 e3       	ldi	r17, 0x32	; 50
 59e:	00 e0       	ldi	r16, 0x00	; 0
 5a0:	f1 2c       	mov	r15, r1
 5a2:	e1 2c       	mov	r14, r1
 5a4:	51 e0       	ldi	r21, 0x01	; 1
 5a6:	40 e0       	ldi	r20, 0x00	; 0
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	20 e0       	ldi	r18, 0x00	; 0
 5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <main+0x34>
	unsigned long int c;
	while(1){
		c = a%b;
		if(c==0){return b;}
		a = b;
		b = c;
 5ae:	16 2f       	mov	r17, r22
 5b0:	07 2f       	mov	r16, r23
 5b2:	f8 2e       	mov	r15, r24
 5b4:	e9 2e       	mov	r14, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 5b6:	65 2f       	mov	r22, r21
 5b8:	74 2f       	mov	r23, r20
 5ba:	83 2f       	mov	r24, r19
 5bc:	92 2f       	mov	r25, r18
 5be:	21 2f       	mov	r18, r17
 5c0:	30 2f       	mov	r19, r16
 5c2:	4f 2d       	mov	r20, r15
 5c4:	5e 2d       	mov	r21, r14
 5c6:	de d0       	rcall	.+444    	; 0x784 <__udivmodsi4>
 5c8:	51 2f       	mov	r21, r17
 5ca:	40 2f       	mov	r20, r16
 5cc:	3f 2d       	mov	r19, r15
 5ce:	2e 2d       	mov	r18, r14
		if(c==0){return b;}
 5d0:	61 15       	cp	r22, r1
 5d2:	71 05       	cpc	r23, r1
 5d4:	81 05       	cpc	r24, r1
 5d6:	91 05       	cpc	r25, r1
 5d8:	51 f7       	brne	.-44     	; 0x5ae <main+0x2c>
 5da:	0f 2e       	mov	r0, r31
 5dc:	f2 e3       	ldi	r31, 0x32	; 50
 5de:	df 2e       	mov	r13, r31
 5e0:	f0 2d       	mov	r31, r0
 5e2:	c1 2c       	mov	r12, r1
 5e4:	b1 2c       	mov	r11, r1
 5e6:	a1 2c       	mov	r10, r1
 5e8:	04 c0       	rjmp	.+8      	; 0x5f2 <main+0x70>
		a = b;
		b = c;
 5ea:	d6 2e       	mov	r13, r22
 5ec:	c7 2e       	mov	r12, r23
 5ee:	b8 2e       	mov	r11, r24
 5f0:	a9 2e       	mov	r10, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 5f2:	61 2f       	mov	r22, r17
 5f4:	70 2f       	mov	r23, r16
 5f6:	8f 2d       	mov	r24, r15
 5f8:	9e 2d       	mov	r25, r14
 5fa:	2d 2d       	mov	r18, r13
 5fc:	3c 2d       	mov	r19, r12
 5fe:	4b 2d       	mov	r20, r11
 600:	5a 2d       	mov	r21, r10
 602:	c0 d0       	rcall	.+384    	; 0x784 <__udivmodsi4>
 604:	1d 2d       	mov	r17, r13
 606:	0c 2d       	mov	r16, r12
 608:	fb 2c       	mov	r15, r11
 60a:	ea 2c       	mov	r14, r10
		if(c==0){return b;}
 60c:	61 15       	cp	r22, r1
 60e:	71 05       	cpc	r23, r1
 610:	81 05       	cpc	r24, r1
 612:	91 05       	cpc	r25, r1
 614:	51 f7       	brne	.-44     	; 0x5ea <main+0x68>
 616:	0f 2e       	mov	r0, r31
 618:	f2 e3       	ldi	r31, 0x32	; 50
 61a:	ef 2e       	mov	r14, r31
 61c:	f0 2d       	mov	r31, r0
 61e:	f1 2c       	mov	r15, r1
 620:	00 e0       	ldi	r16, 0x00	; 0
 622:	10 e0       	ldi	r17, 0x00	; 0
 624:	04 c0       	rjmp	.+8      	; 0x62e <main+0xac>
		a = b;
		b = c;
 626:	e6 2e       	mov	r14, r22
 628:	f7 2e       	mov	r15, r23
 62a:	08 2f       	mov	r16, r24
 62c:	19 2f       	mov	r17, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 62e:	6d 2d       	mov	r22, r13
 630:	7c 2d       	mov	r23, r12
 632:	8b 2d       	mov	r24, r11
 634:	9a 2d       	mov	r25, r10
 636:	2e 2d       	mov	r18, r14
 638:	3f 2d       	mov	r19, r15
 63a:	40 2f       	mov	r20, r16
 63c:	51 2f       	mov	r21, r17
 63e:	a2 d0       	rcall	.+324    	; 0x784 <__udivmodsi4>
 640:	de 2c       	mov	r13, r14
 642:	cf 2c       	mov	r12, r15
 644:	b0 2e       	mov	r11, r16
 646:	a1 2e       	mov	r10, r17
		if(c==0){return b;}
 648:	61 15       	cp	r22, r1
 64a:	71 05       	cpc	r23, r1
 64c:	81 05       	cpc	r24, r1
 64e:	91 05       	cpc	r25, r1
 650:	51 f7       	brne	.-44     	; 0x626 <main+0xa4>

	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;

	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
 652:	62 e3       	ldi	r22, 0x32	; 50
 654:	70 e0       	ldi	r23, 0x00	; 0
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	2e 2d       	mov	r18, r14
 65c:	3f 2d       	mov	r19, r15
 65e:	40 2f       	mov	r20, r16
 660:	51 2f       	mov	r21, r17
 662:	90 d0       	rcall	.+288    	; 0x784 <__udivmodsi4>

	//Declare an array of tasks
	static task task1;
	static task task2;
	static task task3;
	task *tasks[] = {&task1, &task2, &task3};
 664:	86 e0       	ldi	r24, 0x06	; 6
 666:	e4 e0       	ldi	r30, 0x04	; 4
 668:	f1 e0       	ldi	r31, 0x01	; 1
 66a:	de 01       	movw	r26, r28
 66c:	11 96       	adiw	r26, 0x01	; 1
 66e:	01 90       	ld	r0, Z+
 670:	0d 92       	st	X+, r0
 672:	8a 95       	dec	r24
 674:	e1 f7       	brne	.-8      	; 0x66e <main+0xec>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = -1;//Task initial state.
 676:	e0 e2       	ldi	r30, 0x20	; 32
 678:	f1 e0       	ldi	r31, 0x01	; 1
 67a:	8f ef       	ldi	r24, 0xFF	; 255
 67c:	80 83       	st	Z, r24
	task1.period = SMTick1_period;//Task Period.
 67e:	21 83       	std	Z+1, r18	; 0x01
 680:	32 83       	std	Z+2, r19	; 0x02
 682:	43 83       	std	Z+3, r20	; 0x03
 684:	54 83       	std	Z+4, r21	; 0x04
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 686:	25 83       	std	Z+5, r18	; 0x05
 688:	36 83       	std	Z+6, r19	; 0x06
 68a:	47 83       	std	Z+7, r20	; 0x07
 68c:	50 87       	std	Z+8, r21	; 0x08
	task1.TickFct = &d_Tick;//Function pointer for the tick.
 68e:	64 e7       	ldi	r22, 0x74	; 116
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	72 87       	std	Z+10, r23	; 0x0a
 694:	61 87       	std	Z+9, r22	; 0x09

	// Task 2
	task2.state = -1;//Task initial state.
 696:	e5 e1       	ldi	r30, 0x15	; 21
 698:	f1 e0       	ldi	r31, 0x01	; 1
 69a:	80 83       	st	Z, r24
	task2.period = SMTick2_period;//Task Period.
 69c:	21 83       	std	Z+1, r18	; 0x01
 69e:	32 83       	std	Z+2, r19	; 0x02
 6a0:	43 83       	std	Z+3, r20	; 0x03
 6a2:	54 83       	std	Z+4, r21	; 0x04
	task2.elapsedTime = SMTick2_period;//Task current elapsed time.
 6a4:	25 83       	std	Z+5, r18	; 0x05
 6a6:	36 83       	std	Z+6, r19	; 0x06
 6a8:	47 83       	std	Z+7, r20	; 0x07
 6aa:	50 87       	std	Z+8, r21	; 0x08
	task2.TickFct = &s_Tick;//Function pointer for the tick.
 6ac:	62 e2       	ldi	r22, 0x22	; 34
 6ae:	71 e0       	ldi	r23, 0x01	; 1
 6b0:	72 87       	std	Z+10, r23	; 0x0a
 6b2:	61 87       	std	Z+9, r22	; 0x09
	
	// Task 3
	task3.state = -1;//Task initial state.
 6b4:	ea e0       	ldi	r30, 0x0A	; 10
 6b6:	f1 e0       	ldi	r31, 0x01	; 1
 6b8:	80 83       	st	Z, r24
	task3.period = SMTick3_period;//Task Period.
 6ba:	21 83       	std	Z+1, r18	; 0x01
 6bc:	32 83       	std	Z+2, r19	; 0x02
 6be:	43 83       	std	Z+3, r20	; 0x03
 6c0:	54 83       	std	Z+4, r21	; 0x04
	task3.elapsedTime = SMTick3_period;//Task current elapsed time.
 6c2:	25 83       	std	Z+5, r18	; 0x05
 6c4:	36 83       	std	Z+6, r19	; 0x06
 6c6:	47 83       	std	Z+7, r20	; 0x07
 6c8:	50 87       	std	Z+8, r21	; 0x08
	task3.TickFct = &j_Tick;//Function pointer for the tick.
 6ca:	82 e6       	ldi	r24, 0x62	; 98
 6cc:	92 e0       	ldi	r25, 0x02	; 2
 6ce:	92 87       	std	Z+10, r25	; 0x0a
 6d0:	81 87       	std	Z+9, r24	; 0x09
	
	// Set the timer and turn it on
	TimerSet(GCD);
 6d2:	6e 2d       	mov	r22, r14
 6d4:	7f 2d       	mov	r23, r15
 6d6:	80 2f       	mov	r24, r16
	TimerOn();
 6d8:	91 2f       	mov	r25, r17
 6da:	53 de       	rcall	.-858    	; 0x382 <TimerSet>

	ADC_init();
 6dc:	63 de       	rcall	.-826    	; 0x3a4 <TimerOn>
 6de:	d2 de       	rcall	.-604    	; 0x484 <ADC_init>
	pwm_init();
 6e0:	c1 de       	rcall	.-638    	; 0x464 <pwm_init>

	unsigned short i;
	while(1) {
		if (ADC_read(2) > 750)
		{
			photoresistor = 0x01;
 6e2:	bb 24       	eor	r11, r11
 6e4:	b3 94       	inc	r11
 6e6:	7e 01       	movw	r14, r28
 6e8:	27 e0       	ldi	r18, 0x07	; 7
 6ea:	e2 0e       	add	r14, r18
 6ec:	f1 1c       	adc	r15, r1
	ADC_init();
	pwm_init();

	unsigned short i;
	while(1) {
		if (ADC_read(2) > 750)
 6ee:	82 e0       	ldi	r24, 0x02	; 2
 6f0:	d0 de       	rcall	.-608    	; 0x492 <ADC_read>
 6f2:	8f 3e       	cpi	r24, 0xEF	; 239
 6f4:	92 40       	sbci	r25, 0x02	; 2
 6f6:	18 f0       	brcs	.+6      	; 0x6fe <main+0x17c>
 6f8:	b0 92 2b 01 	sts	0x012B, r11	; 0x80012b <photoresistor>
		{
			photoresistor = 0x01;
 6fc:	3f c0       	rjmp	.+126    	; 0x77c <main+0x1fa>
 6fe:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <photoresistor>
		} 
		else
		{
			photoresistor = 0x00;
 702:	3c c0       	rjmp	.+120    	; 0x77c <main+0x1fa>
 704:	f6 01       	movw	r30, r12
		}
		//ADC_Wait();
		for ( i = 0; i < numTasks; i++ ) {
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 706:	01 91       	ld	r16, Z+
 708:	11 91       	ld	r17, Z+
 70a:	6f 01       	movw	r12, r30
 70c:	d8 01       	movw	r26, r16
 70e:	15 96       	adiw	r26, 0x05	; 5
 710:	4d 91       	ld	r20, X+
 712:	5d 91       	ld	r21, X+
 714:	6d 91       	ld	r22, X+
 716:	7c 91       	ld	r23, X
 718:	18 97       	sbiw	r26, 0x08	; 8
 71a:	11 96       	adiw	r26, 0x01	; 1
 71c:	8d 91       	ld	r24, X+
 71e:	9d 91       	ld	r25, X+
 720:	0d 90       	ld	r0, X+
 722:	bc 91       	ld	r27, X
 724:	a0 2d       	mov	r26, r0
 726:	48 17       	cp	r20, r24
 728:	59 07       	cpc	r21, r25
 72a:	6a 07       	cpc	r22, r26
 72c:	7b 07       	cpc	r23, r27
 72e:	81 f4       	brne	.+32     	; 0x750 <main+0x1ce>
 730:	f8 01       	movw	r30, r16
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 732:	80 81       	ld	r24, Z
 734:	01 84       	ldd	r0, Z+9	; 0x09
 736:	f2 85       	ldd	r31, Z+10	; 0x0a
 738:	e0 2d       	mov	r30, r0
 73a:	08 2e       	mov	r0, r24
 73c:	00 0c       	add	r0, r0
 73e:	99 0b       	sbc	r25, r25
 740:	09 95       	icall
 742:	d8 01       	movw	r26, r16
 744:	8c 93       	st	X, r24
 746:	f8 01       	movw	r30, r16
				tasks[i]->elapsedTime = 0;
 748:	15 82       	std	Z+5, r1	; 0x05
 74a:	16 82       	std	Z+6, r1	; 0x06
 74c:	17 82       	std	Z+7, r1	; 0x07
 74e:	10 86       	std	Z+8, r1	; 0x08
 750:	f8 01       	movw	r30, r16
			}
			tasks[i]->elapsedTime += 1;
 752:	85 81       	ldd	r24, Z+5	; 0x05
 754:	96 81       	ldd	r25, Z+6	; 0x06
 756:	a7 81       	ldd	r26, Z+7	; 0x07
 758:	b0 85       	ldd	r27, Z+8	; 0x08
 75a:	01 96       	adiw	r24, 0x01	; 1
 75c:	a1 1d       	adc	r26, r1
 75e:	b1 1d       	adc	r27, r1
 760:	85 83       	std	Z+5, r24	; 0x05
 762:	96 83       	std	Z+6, r25	; 0x06
 764:	a7 83       	std	Z+7, r26	; 0x07
 766:	b0 87       	std	Z+8, r27	; 0x08
 768:	ce 14       	cp	r12, r14
		else
		{
			photoresistor = 0x00;
		}
		//ADC_Wait();
		for ( i = 0; i < numTasks; i++ ) {
 76a:	df 04       	cpc	r13, r15
 76c:	59 f6       	brne	.-106    	; 0x704 <main+0x182>
 76e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <TimerFlag>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 772:	88 23       	and	r24, r24
 774:	e1 f3       	breq	.-8      	; 0x76e <main+0x1ec>
 776:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <TimerFlag>
		TimerFlag = 0;
 77a:	b9 cf       	rjmp	.-142    	; 0x6ee <main+0x16c>
	}
 77c:	ce 01       	movw	r24, r28
 77e:	01 96       	adiw	r24, 0x01	; 1
 780:	6c 01       	movw	r12, r24
 782:	c0 cf       	rjmp	.-128    	; 0x704 <main+0x182>

00000784 <__udivmodsi4>:
 784:	a1 e2       	ldi	r26, 0x21	; 33
 786:	1a 2e       	mov	r1, r26
 788:	aa 1b       	sub	r26, r26
 78a:	bb 1b       	sub	r27, r27
 78c:	fd 01       	movw	r30, r26
 78e:	0d c0       	rjmp	.+26     	; 0x7aa <__udivmodsi4_ep>

00000790 <__udivmodsi4_loop>:
 790:	aa 1f       	adc	r26, r26
 792:	bb 1f       	adc	r27, r27
 794:	ee 1f       	adc	r30, r30
 796:	ff 1f       	adc	r31, r31
 798:	a2 17       	cp	r26, r18
 79a:	b3 07       	cpc	r27, r19
 79c:	e4 07       	cpc	r30, r20
 79e:	f5 07       	cpc	r31, r21
 7a0:	20 f0       	brcs	.+8      	; 0x7aa <__udivmodsi4_ep>
 7a2:	a2 1b       	sub	r26, r18
 7a4:	b3 0b       	sbc	r27, r19
 7a6:	e4 0b       	sbc	r30, r20
 7a8:	f5 0b       	sbc	r31, r21

000007aa <__udivmodsi4_ep>:
 7aa:	66 1f       	adc	r22, r22
 7ac:	77 1f       	adc	r23, r23
 7ae:	88 1f       	adc	r24, r24
 7b0:	99 1f       	adc	r25, r25
 7b2:	1a 94       	dec	r1
 7b4:	69 f7       	brne	.-38     	; 0x790 <__udivmodsi4_loop>
 7b6:	60 95       	com	r22
 7b8:	70 95       	com	r23
 7ba:	80 95       	com	r24
 7bc:	90 95       	com	r25
 7be:	9b 01       	movw	r18, r22
 7c0:	ac 01       	movw	r20, r24
 7c2:	bd 01       	movw	r22, r26
 7c4:	cf 01       	movw	r24, r30
 7c6:	08 95       	ret

000007c8 <__tablejump2__>:
 7c8:	ee 0f       	add	r30, r30
 7ca:	ff 1f       	adc	r31, r31
 7cc:	00 24       	eor	r0, r0
 7ce:	00 1c       	adc	r0, r0
 7d0:	0b be       	out	0x3b, r0	; 59
 7d2:	07 90       	elpm	r0, Z+
 7d4:	f6 91       	elpm	r31, Z
 7d6:	e0 2d       	mov	r30, r0
 7d8:	09 94       	ijmp

000007da <_exit>:
 7da:	f8 94       	cli

000007dc <__stop_program>:
 7dc:	ff cf       	rjmp	.-2      	; 0x7dc <__stop_program>
